import React, { createContext, useContext, useState, useCallback } from 'react';
import { Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useEffect } from 'react';

type Language = 'en' | 'ru';
type Theme = 'light' | 'dark';

type TranslationKey = string;

type Translations = {
  [key in Language]: {
    [key: string]: string;
  };
};

const translations: Translations = {
  en: {
    Nickname: 'Nickname',
    Status: 'Status',
    Description: 'Description',
    Points: 'Points',
    BestStreak: 'Best Streak',
    lessons: 'lessons',
    NoDescription: 'No description',
    modeChanged: 'Mode changed',
     delete : 'Delete',
     cancel : 'Cancel',
     deleteChat : 'Delete Chat',
     noSavedChats : 'No saved chats',
     createNewChat : 'Create New Chat',
      back : 'Back',
      newChat : 'New Chat',
      tajikLanguageChat : 'Tajik Language Chat',
    exitTestMessage: 'Are you sure you want to exit. The progress will not be saved',

    exitTestTitle: 'Exiting the test',
    exit: 'Exit',
    NewChat: 'New Chat', 
   
    listChats: 'Chat List', 
    chats: 'Chats',
    preparation: 'Preparation',
    proceedToReading: 'Proceed To Reading',
    reading: 'Reading',
    online: 'Online',
offline: 'Offline',
lastSeen: 'Last seen',
minutesAgo: 'm ago',
hoursAgo: 'h ago', 
daysAgo: 'd ago',
    translatorTitle: 'Tajik Language Translator',
    warning: 'Warning: We are not responsible for the quality of this translation service. For best results, use full sentences.',
    inputLabel: 'Source text',
    inputPlaceholder: 'Enter text to translate to Tajik (full sentences recommended)...',
    outputLabel: 'Translation to Tajik',
    outputPlaceholder: 'Translation will appear here',
    translate: 'Translate',
    translating: 'Translating...',
    errorEmpty: 'Please enter text to translate',
    errorApi: 'Translation error. Please try again later.',
    infoApi: 'Using free MyMemory Translation API',
    infoLimit: 'Limit: ~1000 characters per request',
    infoTip: 'For more accurate translation, use full sentences',
    swap: 'Swap',
    top_learners: 'Top language learners this week',
    profile_description: 'View or edit your profile',
    instructions: 'Instructions',
    howToStudy: 'How to Study',
    tapWordsInstruction: '1. Tap on the word to see its meaning',
    learnPronunciationInstruction: '2. Listen to the pronunciation',
    practiceExamplesInstruction: '3. Practice using the word in examples',
    testInstructions: 'Test Instructions',
    multipleChoiceInstruction: 'Choose the correct answer from options',
    scoreRequirementInstruction: 'You need a minimum score to pass',
    pointsExplanationInstruction: 'Earn points for each correct answer',
    tips: 'Tips',
    reviewWordsInstruction: 'Review words after each lesson',
    takeNotesInstruction: 'Take notes to remember better',
    practiceRegularlyInstruction: 'Practice regularly for better results',
    startLearning: 'Start Learning',
    home: 'Home',
    profile: 'Profile',
    leaderboard: 'Leaderboard',
    settings: 'Settings',
    language: 'Language',
    learn: 'Learn Tajik',
    points: 'Points',
    levelsCompleted: 'Levels Completed',
    bestStreak: 'Best Streak',
    currentStreak: 'Current Streak',
    privacyPolicy: 'Privacy Policy',
    ourTeam: 'Our Team',
    days: 'lessons',
    recentAchievements: 'Recent Achievements',
    completed: 'Completed',
    earn: 'Earn',
    loading: 'Loading...',
    noLevels: 'No levels available',
    completePreviousLevel: 'Complete previous level to unlock',
    startTest: 'Start Test',
    testResults: 'Test Results',
    score: 'Score',
    congratulations: 'Congratulations! You\'ve passed this level!',
    tryAgain: 'Try again to pass this level.',
    retryButton: 'Try Again',
    returnHome: 'Return Home',
    levelNotFound: 'This level doesn\'t exist.',
    username: 'Username',
    enterUsername: 'Enter your username',
    changePhoto: 'Change Photo',
    saveChanges: 'Save Changes',
    saving: 'Saving...',
    profileUpdated: 'Profile updated successfully!',
    explanation: 'Explanation',
    examples: 'Examples',
    noExamples: 'No examples available',
    close: 'Close',
    hideKeyboard: 'Hide Keyboard',
    showKeyboard: 'Show Keyboard',
    correct: 'Correct!',
    incorrect: 'Incorrect',
    correctAnswer: 'Correct Answer',
    submit: 'Submit',
    finish: 'Finish',
    nextQuestion: 'Next Question',
    hideHint: 'Hide Hint',
    showHint: 'Show Hint',
    question: 'Question',
    levelAlreadyCompleted: 'You have already completed this level',
    goBack: 'Go Back',
    // Alphabet page translations
    tajikAlphabet: 'Tajik Alphabet',
    clickLetterInfo: 'Click on a letter for detailed information',
    transcription: 'Transcription',
    // Auth translations
    signIn: 'Sign In',
    signUp: 'Sign Up',
    signOut: 'Sign Out',
    email: 'Email',
    password: 'Password',
    confirmPassword: 'Confirm Password',
    newPassword: 'New Password',
    changePassword: 'Change Password',
    changing: 'Changing password...',
   
    passwordsDoNotMatch: 'Passwords do not match',
    errorLoadingData: 'Error loading data. Please try again.',
    retry: 'Retry',
    translator: 'Translator',
    from: 'From',
    to: 'To',
    listen: 'Listen',
    copy: 'Copy',
    share: 'Share',
    typeHere: 'Type here',
    typeTajikHere: 'Type tajik here',
 
    translationWillAppearHere: 'Translation will appear here',
    previousQuestion: 'Previous Question',
    darkMode: 'Dark Mode',
    lightMode: 'Light Mode',
    theme: 'Theme',
    enterDescription: 'Enter a short description about yourself...',
    yourAnswer: 'Your Answer',
    ok: 'OK',
    chatAssistant: 'Chat Assistant',
    chatTitle: 'Tajik Language Chat',
   
    placeholder: 'Ask a question about the Tajik language...',
    send: 'Send',
    error: 'An error occurred. Please try again.',
    grammar: 'Grammar',
    translatorHeadersubtitle: 'üåê Multi-language translator with Tajik support',
    search_by_username: "Search by username",
  sort: "Sort",
  sort_by: "Sort by",
  filters: "Filters",
  xp_points: "XP Points",
  min: "Min",
  max: "Max",
  min_streak: "Minimum streak",
  online_status: "Online Status",
  
  want_to_chat: "Want to chat",
  location: "Location",
  enter_location: "Enter location",
  reset: "Reset",
  apply: "Apply",
  loading_top_learners: "Loading top learners...",
  no_results_found: "No results found",
  try_adjusting_filters: "Try adjusting your filters",
  },
  ru: {
    search_by_username: "–ü–æ–∏—Å–∫ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É",
  sort: "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞",
  sort_by: "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ",
  filters: "–§–∏–ª—å—Ç—Ä—ã",
  xp_points: "–û—á–∫–∏ –æ–ø—ã—Ç–∞",
  min: "–ú–∏–Ω",
  max: "–ú–∞–∫—Å",
  min_streak: "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π streak",
  online_status: "–°—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω",
 
  
  want_to_chat: "–•–æ—á–µ—Ç –æ–±—â–∞—Ç—å—Å—è",
  location: "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
  enter_location: "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
  reset: "–°–±—Ä–æ—Å–∏—Ç—å",
  apply: "–ü—Ä–∏–º–µ–Ω–∏—Ç—å",
  loading_top_learners: "–ó–∞–≥—Ä—É–∑–∫–∞ –ª—É—á—à–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤...",
  no_results_found: "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
  try_adjusting_filters: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã",
    translatorHeadersubtitle: 'üåê –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–∞–¥–∂–∏–∫—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
    Nickname: '–ù–∏–∫',
    Status: '–°—Ç–∞—Ç—É—Å',
    Description: '–û–ø–∏—Å–∞–Ω–∏–µ',
    Points: '–û—á–∫–∏',
    BestStreak: '–õ—É—á—à–∏–π —Ä–µ–∫–æ—Ä–¥',
    lessons: '—É—Ä–æ–∫–æ–≤',
    NoDescription: '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è',
    modeChanged: '–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω',
     delete : '–£–¥–∞–ª–∏—Ç—å',
     cancel : '–û—Ç–º–µ–Ω–∞',
     deleteChat : '–£–¥–∞–ª–∏—Ç—å —á–∞—Ç',
     noSavedChats : '–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤',
     createNewChat : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç',
      back : '–ù–∞–∑–∞–¥',
      newChat : '–ù–æ–≤—ã–π —á–∞—Ç',
      tajikLanguageChat : '–ß–∞—Ç –ø–æ —Ç–∞–¥–∂–∏–∫—Å–∫–æ–º—É —è–∑—ã–∫—É',
    grammar: '–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞',
    exitTestMessage: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏? –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
   
    exitTestTitle: '–í—ã—Ö–æ–¥ –∏–∑ —Ç–µ—Å—Ç–∞',
    exit: '–í—ã—Ö–æ–¥',
    NewChat: '–ù–æ–≤—ã–π —á–∞—Ç', 
    
    listChats: '–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤', 
    chats: '–ß–∞—Ç—ã',
    preparation: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç–µ—Å—Ç—É',
    proceedToReading: '–ü–µ—Ä–µ–π—Ç–∏ –∫ —á—Ç–µ–Ω–∏—é',
    reading: '–ß—Ç–µ–Ω–∏–µ',
     chatTitle: '–ß–∞—Ç –ø–æ —Ç–∞–¥–∂–∏–∫—Å–∫–æ–º—É —è–∑—ã–∫—É',
    
    placeholder: '–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–∞–¥–∂–∏–∫—Å–∫–æ–º—É —è–∑—ã–∫—É...',
    send: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å',
    error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
    online: '–û–Ω–ª–∞–π–Ω',
offline: '–û—Ñ–ª–∞–π–Ω',
lastSeen: '–ë—ã–ª –≤ —Å–µ—Ç–∏',
minutesAgo: ' –º–∏–Ω. –Ω–∞–∑–∞–¥',
hoursAgo: ' —á. –Ω–∞–∑–∞–¥',
daysAgo: ' –¥–Ω. –Ω–∞–∑–∞–¥',
    translatorTitle: '–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –Ω–∞ —Ç–∞–¥–∂–∏–∫—Å–∫–∏–π —è–∑—ã–∫',
    warning: '–í–Ω–∏–º–∞–Ω–∏–µ: –ú—ã –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. –î–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏.',
    inputLabel: '–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç',
    inputPlaceholder: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —Ç–∞–¥–∂–∏–∫—Å–∫–∏–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)...',
    outputLabel: '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ç–∞–¥–∂–∏–∫—Å–∫–∏–π',
    outputPlaceholder: '–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥',
    translate: '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏',
    translating: '–ü–µ—Ä–µ–≤–æ–∂—É...',
    errorEmpty: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞',
    errorApi: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
    infoApi: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API MyMemory Translation',
    infoLimit: '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: ~1000 —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ –∑–∞–ø—Ä–æ—Å',
    infoTip: '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
    swap: '‚Üî',
    top_learners: '–õ—É—á—à–∏–µ –∏–∑—É—á–∞—é—â–∏–µ —è–∑—ã–∫ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ',
    profile_description: '–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å',
    instructions: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
    howToStudy: '–ö–∞–∫ —É—á–∏—Ç—å—Å—è',
    tapWordsInstruction: '1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ',
    learnPronunciationInstruction: '2. –°–ª—É—à–∞–π—Ç–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ',
    practiceExamplesInstruction: '3. –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–æ–≤–æ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö',
    testInstructions: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫ —Ç–µ—Å—Ç—É',
    multipleChoiceInstruction: '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤',
    scoreRequirementInstruction: '–í–∞–º –Ω—É–∂–µ–Ω –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è',
    pointsExplanationInstruction: '–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –æ—á–∫–∏ –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç',
    tips: '–°–æ–≤–µ—Ç—ã',
    reviewWordsInstruction: '–ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ —Å–ª–æ–≤–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞',
    takeNotesInstruction: '–î–µ–ª–∞–π—Ç–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
    practiceRegularlyInstruction: '–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
    startLearning: '–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ',
    home: '–ì–ª–∞–≤–Ω–∞—è',
    profile: '–ü—Ä–æ—Ñ–∏–ª—å',
    leaderboard: '–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤',
    settings: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
    language: '–Ø–∑—ã–∫',
    learn: '–ò–∑—É—á–∞—Ç—å —Ç–∞–¥–∂–∏–∫—Å–∫–∏–π',
    points: '–û—á–∫–∏',
    levelsCompleted: '–£—Ä–æ–≤–Ω–µ–π –ø—Ä–æ–π–¥–µ–Ω–æ',
    bestStreak: '–õ—É—á—à–∞—è —Å–µ—Ä–∏—è',
    currentStreak: '–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è',
    days: '—É—Ä–æ–∫–æ–≤',
    recentAchievements: '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
    completed: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
    earn: '–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å',
    loading: '–ó–∞–≥—Ä—É–∑–∫–∞...',
    noLevels: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π',
    completePreviousLevel: '–ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å',
    startTest: '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç',
    testResults: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞',
    score: '–°—á–µ—Ç',
    congratulations: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å!',
    tryAgain: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —É—Ä–æ–≤–µ–Ω—å.',
    retryButton: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
    returnHome: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é',
    levelNotFound: '–≠—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.',
    username: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    enterUsername: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    changePhoto: '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ',
    saveChanges: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è',
    saving: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...',
    profileUpdated: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!',
    explanation: '–û–±—ä—è—Å–Ω–µ–Ω–∏–µ',
    examples: '–ü—Ä–∏–º–µ—Ä—ã',
    noExamples: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤',
    close: '–ó–∞–∫—Ä—ã—Ç—å',
    hideKeyboard: '–°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É',
    showKeyboard: '–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É',
    correct: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!',
    incorrect: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ',
    correctAnswer: '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç',
    submit: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å',
    finish: '–ó–∞–≤–µ—Ä—à–∏—Ç—å',
    nextQuestion: '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å',
    hideHint: '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É',
    showHint: '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É',
    question: '–í–æ–ø—Ä–æ—Å',
    levelAlreadyCompleted: '–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å',
    goBack: '–ù–∞–∑–∞–¥',
    // Alphabet page translations
    tajikAlphabet: '–¢–∞–¥–∂–∏–∫—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç',
    clickLetterInfo: '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –±—É–∫–≤—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
    transcription: '–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è',
    // Auth translations
    signIn: '–í–æ–π—Ç–∏',
    signUp: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
    signOut: '–í—ã–π—Ç–∏',
    email: 'Email',
    password: '–ü–∞—Ä–æ–ª—å',
    confirmPassword: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å',
    newPassword: '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å',
    changePassword: '–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å',
    changing: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è...',
  
    passwordsDoNotMatch: '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç',
    errorLoadingData: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
    retry: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å',
    translator: '–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫',
    from: '–ò–∑',
    to: '–í',
    listen: '–°–ª—É—à–∞—Ç—å',
    copy: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å',
    share: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è',
    typeHere: '–í–≤–µ–¥–∏—Ç–µ ',
    typeTajikHere: '–í–≤–µ–¥–∏—Ç–µ',
    
    translationWillAppearHere: '–ü–µ—Ä–µ–≤–æ–¥ –ø–æ—è–≤–∏—Ç—å—Å—è –∑–¥–µ—Å—å',
    previousQuestion: '–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å',
    darkMode: '–¢–µ–º–Ω–∞—è —Ç–µ–º–∞',
    lightMode: '–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞',
    theme: '–¢–µ–º–∞',
    enterDescription: '–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ...',
    yourAnswer: '–í–∞—à –æ—Ç–≤–µ—Ç',
    ok: '–û–ö',
    chatAssistant: '–ß–∞—Ç-–ø–æ–º–æ—â–Ω–∏–∫',
    privacyPolicy: '–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏',
    ourTeam: '–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞',
  }
};

export const lightTheme = {
  background: '#f8fafc',
  surface: '#ffffff',
  primary: '#6366f1',
  secondary: '#e5e7eb',
  text: '#1f2937',
  textSecondary: '#6b7280',
  textTertiary: '#9ca3af',
  border: '#e2e8f0',
  success: '#22c55e',
  error: '#ef4444',
  warning: '#f59e0b',
  card: '#ffffff',
  shadow: 'rgba(0, 0, 0, 0.1)',
};

export const darkTheme = {
  background: '#0f172a',
  surface: '#1e293b',
  primary: '#818cf8',
  secondary: '#374151',
  text: '#f1f5f9',
  textSecondary: '#cbd5e1',
  textTertiary: '#94a3b8',
  border: '#334155',
  success: '#34d399',
  error: '#f87171',
  warning: '#fbbf24',
  card: '#1e293b',
  shadow: 'rgba(0, 0, 0, 0.3)',
};

interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => void;
  theme: Theme;
  setTheme: (theme: Theme) => void;
  colors: typeof lightTheme;
  t: (key: TranslationKey) => string;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export function LanguageProvider({ children }: { children: React.ReactNode }) {
  const [language, setLanguage] = useState<Language>('en');
  const [theme, setTheme] = useState<Theme>('light');

  useEffect(() => {
    loadStoredPreferences();
  }, []);

  const loadStoredPreferences = async () => {
    try {
      const storedLanguage = await AsyncStorage.getItem('language');
      const storedTheme = await AsyncStorage.getItem('theme');
      
      if (storedLanguage && (storedLanguage === 'en' || storedLanguage === 'ru')) {
        setLanguage(storedLanguage);
      }
      
      if (storedTheme && (storedTheme === 'light' || storedTheme === 'dark')) {
        setTheme(storedTheme);
      }
    } catch (error) {
      console.error('Error loading stored preferences:', error);
    }
  };

  const handleSetLanguage = useCallback(async (lang: Language) => {
    setLanguage(lang);
    try {
      await AsyncStorage.setItem('language', lang);
    } catch (error) {
      console.error('Error saving language preference:', error);
    }
  }, []);

  const handleSetTheme = useCallback(async (newTheme: Theme) => {
    setTheme(newTheme);
    try {
      await AsyncStorage.setItem('theme', newTheme);
    } catch (error) {
      console.error('Error saving theme preference:', error);
    }
  }, []);

  const t = useCallback(
    (key: TranslationKey) => {
      return translations[language][key] || key;
    },
    [language]
  );

  const colors = theme === 'dark' ? darkTheme : lightTheme;

  return (
    <LanguageContext.Provider value={{ 
      language, 
      setLanguage: handleSetLanguage, 
      theme, 
      setTheme: handleSetTheme, 
      colors, 
      t 
    }}>
      {children}
    </LanguageContext.Provider>
  );
}

export function useLanguage() {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
}